import os
from dotenv import load_dotenv

import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    ContextTypes, ConversationHandler, MessageHandler, filters
)

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É–∫–∞–∑–∞–Ω –≤ —Ñ–∞–π–ª–µ .env")

Q1A, Q1P, Q2A, Q2P, Q3A, Q3P, Q4A, Q4P, Q4S, Q5A, Q5P, Q6A = range(12) 

def get_start_key_board():
    keyboard = [
        [
            InlineKeyboardButton("–ì–æ—Ç–æ–≤!", callback_data="ready"),
            InlineKeyboardButton("–Ø –ø—É–ø—Å–∏–∫...", callback_data="not_ready"),
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_photo(photo=open("images/first", "rb"), caption="""–ü—Ä–∏–≤–µ—Ç, –°–ª–∞–≤–∏–∫! –ö—É–∫—É—Ä—É–∑–∞ –Ω–∞ —Å–≤—è–∑–∏ü§ôüèª
–°–µ–≥–æ–¥–Ω—è —Ç–µ–±—è –∂–¥–µ—Ç –Ω–µ–±–æ–ª—å—à–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ, –≤ –∫–æ–Ω—Ü–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã –Ω–∞–π–¥–µ—à—å —Å–æ–∫—Ä–æ–≤–∏—â–µü§ëü§ëü§ë
–ì–æ—Ç–æ–≤?""", reply_markup=get_start_key_board())
    

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):    
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ (—É–±–∏—Ä–∞–µ—Ç "—á–∞—Å–∏–∫–∏")

    if query.data == "not_ready":
        await query.edit_message_caption(caption="üéâ–ù—É —Ç—ã —à—É—Ç–Ω–∏–∫)", reply_markup=get_start_key_board())

    elif query.data == "ready":
        await query.edit_message_caption(caption="–ü–æ–µ—Ö–∞–ª–∏! üöÄ \n –Ø –¥–æ–º –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤, —É—é—Ç–µ–Ω –∏ —Å–≤–µ—Ç–µ–ª,\n  –í —Å–µ—Ä–¥—Ü–µ –≥–æ—Ä–æ–¥–∞ –∂–¥—É, –∫–æ–≥–¥–∞ —Ç—ã –∫–æ –º–Ω–µ –ø—Ä–∏–µ–¥–µ—à—å.\n –ß—Ç–æ —ç—Ç–æ –∑–∞ –º–µ—Å—Ç–æ, –≥–¥–µ –æ—Ç–¥—ã—Ö –∏ —Ç–µ–ø–ª–æ?")
        return Q1A

async def question1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q1 = update.message.text.strip().lower()
    if q1 == "–≥–æ—Å—Ç–∏–Ω–∏—Ü–∞ –∫–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥":
        await update.message.reply_text("–ú–æ–ª–æ–¥–µ—Ü! –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–∫—É, –∫–∞–∫ –¥–æ–±–µ—Ä–µ—à—å—Å—è –¥–æ –º–µ—Å—Ç–∞ü´µüèª")
        return Q1P
    else:
        await update.message.reply_text("–ü–æ–ø—Ä–æ–±—É–π... –µ—â–µ... —Ä–∞–∑...")
        return Q1A

async def question1_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.photo:
        # –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        await update.message.reply_photo(photo=open("images/photo1", "rb"),
            caption="–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! üëç\n –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å: \n –ö—Ç–æ –∫—Ä–∏—Ç–∏–∫—É–µ—Ç —á–∏—Å—Ç—ã–π —Ä–∞–∑—É–º?"
        )
        return Q2A
    else:
        # –ï—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–µ —Ñ–æ—Ç–æ ‚Äî –ø—Ä–æ—Å–∏–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ. –ù–µ —Ç–µ–∫—Å—Ç!")
        return Q1P  # –û—Å—Ç–∞—ë–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ

async def question2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q2 = update.message.text.strip().lower()
    if q2 == "–∫–∞–Ω—Ç":
        await update.message.reply_text("–ú–æ–ª–æ–¥–µ—Ü! –§–æ—Ç–æ—á–∫—É –ø–∞–º—è—Ç–Ω–∏–∫–∞ –≤ —á–∞—Ç)")
        return Q2P
    else:
        await update.message.reply_text("–ú–¥–∞... –ê –∫–∞–∑–∞–ª–æ—Å—å –≤—Å–µ —Ç–∞–∫ –ø—Ä–æ—Å—Ç–æ...")
        return Q2A

async def question2_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.photo:
        # –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        await update.message.reply_photo(photo=open("images/photo2", "rb"),
            caption="–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! üëç\n –í—Ä–µ–º—è –º–∏–Ω–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: \n –ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ –ø–∞–º—è—Ç–Ω–∏–∫ –∏ —Å–æ—Å—Ç–∞–≤—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ..."
        )
        return Q3A
    else:
        # –ï—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–µ —Ñ–æ—Ç–æ ‚Äî –ø—Ä–æ—Å–∏–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ. –ù–µ —Ç–µ–∫—Å—Ç!")
        return Q2P  # –û—Å—Ç–∞—ë–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ


    
async def question3(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q2 = update.message.text.strip().lower()
    if q2 == "—Ç–∞–Ω–∫":
        await update.message.reply_text("–ú–æ–ª–æ–¥–µ—Ü! –ö–∞–∫ –∏ —Ä–∞–Ω—å—à–µ, –Ω—É–∂–Ω–∞ —Ñ–æ—Ç–∫–∞, –Ω–æ —Ç–µ–ø–µ—Ä—å —Ç–∞–Ω–∫–∞")
        return Q3P
    else:
        await update.message.reply_text("–Ø —É–∂–µ –∫—Ä–∞—Å–Ω—ã–π!")
        return Q3A
    

async def question3_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.photo:
        # –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        await update.message.reply_photo(photo=open("images/photo3", "rb"),
            caption="–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! üëç\n –ù–∞ –≤–Ω–∏–º–∞—Ç–æ—á–Ω–æ—Å—Ç—å: \n –ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ –ø—è—Ç–Ω–∏–∫ –∏ –Ω–∞–π—Ç–∏ –±—É–∫–≤—ã: \n 1: 5 (x2) \n 3: 5, 7, 10 \n 4: 5 \n 6: 3 "
        )
        return Q4A
    else:
        # –ï—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–µ —Ñ–æ—Ç–æ ‚Äî –ø—Ä–æ—Å–∏–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ. –ù–µ —Ç–µ–∫—Å—Ç!")
        return Q3P  # –û—Å—Ç–∞—ë–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ



async def question4(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q2 = update.message.text.strip().lower()
    if q2 == "–∏–∏–º—Ä–Ω—Ç—Å":
        await update.message.reply_text("–ú–æ–ª–æ–¥–µ—Ü! –ê —Ç–µ–ø–µ—Ä—å —Å–æ—Å—Ç–∞–≤—å –∏–∑ —ç—Ç–∏—Ö –±—É–∫–≤ —Å–ª–æ–≤–æ")
        return Q4S
    else:
        await update.message.reply_text("–ü–æ–ø—Ä–æ–±—É–π... –µ—â–µ... —Ä–∞–∑...")
        return Q4A

async def question4s(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q2 = update.message.text.strip().lower()
    if q2 == "–º–∏–Ω–∏—Å—Ç—Ä":
        await update.message.reply_text("–ú–æ–ª–æ–¥–µ—Ü! –°–∫–∏–Ω—å —Ñ–æ—Ç–∫—É!!!!")
        return Q4P
    else:
        await update.message.reply_text("–ü–æ–ø—Ä–æ–±—É–π... –µ—â–µ... —Ä–∞–∑...")
        return Q4S
    

async def question4_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.photo:
        # –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        await update.message.reply_photo(photo=open("images/photo4", "rb"),
            caption="–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! üëç\n –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å: \n –ï–µ –Ω–∞–∑—ã–≤–∞—é—Ç –°—Ç–∞—Ä—ã–º –°–≤–µ—Ç–æ–º, \n –¢–∞–º –≠–π—Ñ–µ–ª–µ–≤–∞ –±–∞—à–Ω—è, –ö–æ–ª–∏–∑–µ–π –µ—Å—Ç—å –≥–¥–µ-—Ç–æ.  \n –ó–¥–µ—Å—å –º–Ω–æ–≥–æ —Å—Ç—Ä–∞–Ω, –Ω–æ –æ–¥–Ω–æ ‚Äì –æ–±—â–∏–π –¥–æ–º, \n –û—Ç –ë–∞–ª—Ç–∏–∫–∏ –¥–æ –°—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º–æ—Ä—å—è, –≤—Å–µ –≤ –Ω—ë–º."
        )
        return Q5A
    else:
        # –ï—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–µ —Ñ–æ—Ç–æ ‚Äî –ø—Ä–æ—Å–∏–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ. –ù–µ —Ç–µ–∫—Å—Ç!")
        return Q4P  # –û—Å—Ç–∞—ë–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ


async def question5(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q2 = update.message.text.strip().lower()
    if q2 == "–µ–≤—Ä–æ–ø–∞":
        await update.message.reply_text("–ö—Ä–∞—Å–∞–≤—á–∏–∫, –ø—É—Ç–Ω–∏–∫!üî• –°–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ –≤ —Å—Ç—É–¥–∏—é. –û—Å—Ç–∞–ª–æ—Å—å –Ω–µ–º–Ω–æ–≥–æ :3")
        return Q5P
    else:
        await update.message.reply_text("–û–≥–æ")
        return Q5A
    

async def question5_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.photo:
        # –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        await update.message.reply_photo(photo=open("images/photo5", "rb"),
            caption="–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! üëç\n –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å: \n –Ø –º–∞–≥–∞–∑–∏–Ω –±–æ–ª—å—à–æ–π, –≥–¥–µ —Ç–µ—Ö–Ω–∏–∫–∞ –∂–∏–≤–µ—Ç, \n –ó–∞–¥—Ä–æ—Ç –≥—É–ª—è—Ç—å –≤–Ω—É—Ç—Ä–∏ –≥–æ—Ç–æ–≤ - –¥–Ω—è–º–∏ –Ω–∞–ø—Ä–æ–ª–µ—Ç. \n –¢–µ–ª–µ–≤–∏–∑–æ—Ä—ã, —Å–º–∞—Ä—Ç—Ñ–æ–Ω—ã ‚Äî –≤—Å–µ, —á—Ç–æ –ª—é–±–∏—à—å —Ç—ã! \n –ß—Ç–æ –∂ –∑–∞ –º–µ—Å—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ ‚Äî –¥–ª—è —à–æ–ø–∏–Ω–≥–∞ –º–µ—á—Ç—ã?"
        )
        return Q6A
    else:
        # –ï—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–µ —Ñ–æ—Ç–æ ‚Äî –ø—Ä–æ—Å–∏–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ. –ù–µ —Ç–µ–∫—Å—Ç!")
        return Q5P  # –û—Å—Ç–∞—ë–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ


async def question6(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q2 = update.message.text.strip().lower()
    if q2[1] == "-" or q2[1] == ".":
        q2 = q2[0] + q2[2:]
    if q2 == "–º–≤–∏–¥–µ–æ":
        await update.message.reply_photo(photo=open("images/last", "rb"), caption="–¢—ã –ø—Ä–æ–¥–µ–ª–∞–ª –¥–ª–∏–Ω–Ω—ã–π –ø—É—Ç—å, –∞ –≤ –∫–æ–Ω—Ü–µ –≤—Å–µ–≥–¥–∞ –ø–æ–ª–æ–∂–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞üéÅ \n –ó–∞–±–µ—Ä–∏ –µ—ë: \n ‚Ññ 1 597 782 563")
        return ConversationHandler.END
    else:
        await update.message.reply_text("–ü–æ–ø—Ä–æ–±—É–π... –µ—â–µ... —Ä–∞–∑...")
        return Q6A
    

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ö–≤–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    return ConversationHandler.END


async def photo_fallback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ. –ù–µ —Ç–µ–∫—Å—Ç!")
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–æ–Ω–æ –∏ —Ç–∞–∫ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è)
    # –ù–æ —á—Ç–æ–±—ã –±—ã—Ç—å —Ç–æ—á–Ω—ã–º, –º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ context, –Ω–æ –ø—Ä–æ—â–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–µ –º–µ–Ω—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    return None  # ConversationHandler –æ—Å—Ç–∞—ë—Ç—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏


def main():
    app = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points = [
        CommandHandler("start", start),
        CallbackQueryHandler(button_handler, pattern="^(ready|not_ready)$")
        ],
        states = {
            Q1A: [MessageHandler(filters.TEXT & ~filters.COMMAND, question1)],
            Q1P: [MessageHandler(filters.PHOTO, question1_photo),
                  MessageHandler(filters.TEXT & ~filters.COMMAND, photo_fallback)],
            Q2A: [MessageHandler(filters.TEXT & ~filters.COMMAND, question2)],
            Q2P: [MessageHandler(filters.PHOTO, question2_photo),
                  MessageHandler(filters.TEXT & ~filters.COMMAND, photo_fallback)],
            Q3A: [MessageHandler(filters.TEXT & ~filters.COMMAND, question3)],
            Q3P: [MessageHandler(filters.PHOTO, question3_photo),
                  MessageHandler(filters.TEXT & ~filters.COMMAND, photo_fallback)],
            Q4A: [MessageHandler(filters.TEXT & ~filters.COMMAND, question4)],
            Q4S: [MessageHandler(filters.TEXT & ~filters.COMMAND, question4s)],
            Q4P: [MessageHandler(filters.PHOTO, question4_photo),
                  MessageHandler(filters.TEXT & ~filters.COMMAND, photo_fallback)],
            Q5A: [MessageHandler(filters.TEXT & ~filters.COMMAND, question5)],
            Q5P: [MessageHandler(filters.PHOTO, question5_photo),
                  MessageHandler(filters.TEXT & ~filters.COMMAND, photo_fallback)],
            Q6A: [MessageHandler(filters.TEXT & ~filters.COMMAND, question6)],
        },
        fallbacks = [CommandHandler("start", cancel)]      
    )

    app.add_handler(conv_handler)
    app.run_polling()


if __name__ == "__main__":
    main()